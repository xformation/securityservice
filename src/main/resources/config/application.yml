# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: ['configprops', 'env', 'health', 'info', 'jhimetrics', 'logfile', 'loggers', 'prometheus', 'threaddump']
  endpoint:
    health:
      show-details: when-authorized
      roles: 'ROLE_ADMIN'
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        auto-time-requests: true

spring:
  application:
    name: security
  datasource:
    url: jdbc:postgresql://localhost:5432/security
    username: postgres
    password: postgres
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by maven when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: #spring.profiles.active#
  jmx:
    enabled: false
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate.jdbc.lob.non_contextual_creation: true
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  mvc:
    favicon:
      enabled: false
  security:
    user:
      name: admin
      password: admin
      roles:
        - ADMIN
        - USER
  task:
    execution:
      thread-name-prefix: security-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: security-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML

server:
  port: 8094
  servlet:
    session:
      cookie:
        http-only: true

# Properties to be exposed on the /info management endpoint
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'security'
  # By default CORS is disabled. Uncomment to enable.
  cors:
    allowed-origins: '*'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count'
    allow-credentials: true
    max-age: 1800
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        base64-secret: ZDEwYTA0ODJkMDkyZGU0ZjBhMjQ3Yzk1ZDVkZDllNzQ4MDQ0NDNiMDcxNzliZmU5NjM4MWM2Nzc3M2Y1NjJkODRkYzU3ZmNmMDg5OTcyYzc3ZWE0Y2I1YjYzODEzNjU3YzNjNTcxMDVjNGExZDg2NDM0ZGRjZTgxNDQ5ZmFiMDE=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000

  mail:
    from: security@localhost
  swagger:
    default-include-pattern: /api/.*
    title: security API
    description: security API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license:
    license-url:
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
#server.port=8094
#server.port=${SERVER_PORT}

# Fix for SQLFeatureNotSupportedException: Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#---------------------------Property configuration not working.---------------------------------
# following urls can be comma separate string to have multiple urls.
#Format like:
# [{"url": "/api/v1/auth", "authc": true, "roles": "role1, role2", "permissions": "permis1, permis2"}]
#synectiks.shiro.secure.urls=[{"url": "/security/auth/**", "authc": true}]
#
# ,{"url": "/security/users/**", "authc": true, "roles": "ROLE_ADMIN"}\
# ,{"url": "/security/roles/**", "authc": true, "roles": "ROLE_ADMIN"}\
# ,{"url": "/security/permissions/**", "authc": true, "roles": "ROLE_ADMIN"}\
# ,{"url": "/security/users/**", "authc": true, "roles": "ROLE_ADMIN"}
#synectiks.shiro.public.urls=[{"url": "/security/public/**", "authc": false}\
#  ,{"url": "/security/users/**", "authc": false}\
#  ,{"url": "/security/roles/**", "authc": false}\
#  ,{"url": "/security/permissions/**", "authc": false}]

#logging.level.com.amazonaws = info
#logging.level.org.springframework = info
#logging.level.com.synectiks.portal = trace
#logging.level.org.hibernate.SQL = debug
#logging.level.org.hibernate.type = trace

# jdbc:postgresql://localhost:5432/synectiks
#spring.datasource.url=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_DB}
#spring.datasource.username=postgres
#spring.datasource.password=${PSQL_PSWD}

#spring.jpa.generate-ddl=true
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.show-sql=false
#spring.jpa.hibernate.ddl-auto=update

synectiks:
  shiro:
    secure:
      urls: [{ 'url': '/security/auth/**', 'authc': true }]
    public:
      urls: >-
        [{"url": "/security/public/**", "authc": false},
        {"url": "/security/users/**", "authc": false},
        {"url": "/security/roles/**", "authc": false},
        {"url": "/security/permissions/**", "authc": false}]
